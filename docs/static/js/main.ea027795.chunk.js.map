{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setIputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACTC,mBAAS,IADA,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,oCACI,0BAAMC,SAVK,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAa,OAOT,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBU,SAACP,GACvBF,EAAaE,EAAEQ,OAAOF,a,uBCNjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EAAM,0CAA0CC,UAAUH,GAAU,qDADvD,SAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAQF,EAAIE,MACZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAbAC,qBAAU,WACLxB,EAAQC,GACPwB,MAAK,SAAAd,GAEFY,EAAS,CACLf,KAAKG,EACLU,SAAQ,SAInB,CAACpB,IAGIqB,EDVwBI,CAAazB,GAA/Ba,EALuB,EAK5BN,KAAYa,EALgB,EAKhBA,QAGnB,OACI,yBAAKJ,UAAU,aACX,wBAAIA,UAAU,qCAAqChB,GACnD,6BACCoB,GAAW,uBAAGJ,UAAU,oCAAb,WAERH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eAAcgB,IAAKhB,EAAIC,IAAQD,SEhBtCiB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,kBADhB,mBACvB0C,EADuB,KACX3C,EADW,KAG9B,OACI,oCACI,wBAAI+B,UAAU,qCAAd,kBACA,kBAAC,EAAD,CAAa/B,cAAeA,IAC5B,6BACA,4BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI0B,IAAK1B,EACLA,SAAUA,U,MCbtC6B,IAASC,OACL,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.ea027795.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nexport const AddCategory = ({setCategories}) => {\n    const [inputvalue, setIputvalue] = useState('')\n\n    const handleInputchange = (e)=>{\n        setIputvalue(e.target.value);\n    }\n\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(inputvalue.trim().length>2){\n            setCategories(cats=>[inputvalue,...cats]);\n            setIputvalue('')\n        }\n        \n    }\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value={inputvalue}\n                    onChange={handleInputchange}\n                />\n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","export const getGifs = async(category)=>{\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(category)+'&limit=10&api_key=ttrHNQ4tFpFomHP4x2HGAfJpGJSqvUNQ'\n    const response = await fetch(url);\n    const {data} = await response.json();\n    const gifs = data.map(img=>{\n        return {\n            id:img.id,\n            title : img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n    \n    //Llamo a mi Custom Hook\n    \n   \n    const {data:images,loading} = useFetchGifs(category);\n\n    \n    return (\n        <div className=\"card-grid\">\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            <br/>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            {\n                images.map((img)=>(\n                    <GifGridItem  key={img.id} {...img}/>\n                ))\n            }\n           \n        </div>\n    )\n}\n","import {useEffect, useState} from 'react'\nimport {getGifs} from '../helpers/getGifs'\nexport const useFetchGifs = (category) => {\n   const [state, setstate] = useState({\n       data:[],\n       loading :true\n   });\n   useEffect(()=>{\n        getGifs(category)\n        .then(img=>{\n            \n            setstate({\n                data:img,\n                loading:false\n            })\n            \n        })\n   },[category])\n\n\n   return state;\n}\n","import React,{useState}from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch Man']);\n    \n    return (\n        <>\n            <h2 className=\"animate__animated animate__bounce\">Gif Expert App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr/>\n            <ol>\n                {\n                    categories.map(category=>(\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                        \n                    ))\n                }\n            </ol>\n           \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nReactDOM.render(  \n    <GifExpertApp /> , document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}